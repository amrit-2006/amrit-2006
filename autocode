const lib = require('lib')({token: process.env.STDLIB_SECRET_TOKEN});

//mute
module.exports = async (event, context) => {
  let newPrefix = `!`;
  let role = await lib.discord.guilds['@0.1.0'].roles.list({
    guild_id: context.params.event.guild_id,
  });
  let roles = await lib.discord.guilds['@0.1.0'].roles.list({
    guild_id: context.params.event.guild_id,
  });
  let mutedRole = roles.find((role) => {
    return role.name.toLowerCase().startsWith('mute');
  });
  // Sets the mute role for the current guild
  async function setMuteRole(mutedRole) {
    const muteRoleMap = await lib.utils.kv['@0.1.16'].get({
      key: 'mute-role-map',
      defaultValue: {},
    });
    muteRoleMap[context.params.event.guild_id] = mutedRole;
    await lib.utils.kv['@0.1.16'].set({
      key: 'mute-role-map',
      value: muteRoleMap,
    });
  }

  // Gets the mute role for the current guild or 'undefined'
  async function getMuteRole() {
    const muteRoleMap = await lib.utils.kv['@0.1.16'].get({
      key: 'mute-role-map',
      defaultValue: {},
    });
    const mutedRole = muteRoleMap[context.params.event.guild_id];
    if (!mutedRole)
      await lib.discord.channels['@0.1.1'].messages.create({
        channel_id,
        content:
          `A mute role ID has not been set for this server. Please use the ` -
          createmuterole` command to set one.`,
      });
    return mutedRole;
  }

  const guild_id = context.params.event.guild_id;
  const channel_id = context.params.event.channel_id;
  if (
    event.content.startsWith(`${process.env.PREFIX}mute`) ||
    event.content.startsWith(`${newPrefix}mute`)
  ) {
    let text = event.content.split(` `);
    let reason = text.slice(2).join(' ');
    let canMute = false;
    let authorRoles = roles.filter((role) => {
      return event.member.roles.indexOf(role.id) > -1;
    });
    console.log(newPrefix);
    for (let i = 0; i < authorRoles.length; i++) {
      let role = authorRoles[i];
      canMute =
        role.name.toLowerCase().match(/\bmod/i) ||
        role.name.toLowerCase().match(/\badmin/i) ||
        role.permission_names.includes('ADMINISTRATOR');
      if (canMute) {
        break;
      }
    }
    if (!text) {
      await lib.discord.channels['@0.0.6'].messages.create({
        channel_id,
        content: 'tag is not given',
      });
    } else if (!canMute) {
      await lib.discord.channels['@0.1.0'].messages.create({
        channel_id,
        content: `you dont have the permission`,
      });
    } else if (!text.startsWith(`<@`)) {
      await lib.discord.channels['@0.0.6'].messages.create({
        channel_id,
        content: `tag is not given`,
      });
    } else {
      let anotherUser = await lib.discord.guilds['@0.0.6'].members.retrieve({
        user_id: event.mentions[0].id,
        guild_id,
      });
      let cannotBeMuted = false;
      let mentionedUserRoles = roles.filter((role) => {
        return anotherUser.roles.indexOf(role.id) > -1;
      });
      for (let i = 0; i < mentionedUserRoles.length; i++) {
        let anotherRole = mentionedUserRoles[i];
        cannotBeMuted =
          anotherRole.name.toLowerCase().match(/\bmod/i) ||
          anotherRole.name.toLowerCase().match(/\badmin/i) ||
          anotherRole.permission_names.includes('ADMINISTRATOR');
        if (cannotBeMuted) {
          await lib.discord.channels['@0.1.0'].messages.create({
            channel_id,
            content: `Sorry, the person you're trying to mute is an admin/mod`,
          });
          return;
        }
      }
      if (!mutedRole) {
        await lib.discord.channels['@0.1.0'].messages.create({
          channel_id,
          content: 'mute role not found',
        });
      } else {
        let mentionedUserMutedRole = mentionedUserRoles.find((role) => {
          return role.name.toLowerCase().startsWith('mute');
        });
        if (!mentionedUserMutedRole) {
          await lib.discord.channels['@0.1.0'].messages.create({
            channel_id,
            content: 'This user is already muted',
          });
        } else if (text[1] === `<@!${event.mentions[0].id}>` && !reason) {
          await lib.discord.guilds['@0.1.0'].members.roles.update({
            role_id: mutedRole.id,
            user_id: event.mentions[0].id,
            guild_id,
          });
          await lib.discord.channels['@0.0.6'].messages.create({
            channel_id,
            content: ``,
            embed: {
              title: ``,
              type: 'rich',
              color: 0xf3f3f3,
              description: `${text[1]} is muted`,
            },
          });
        } else if (text === `<@!${event.mentions[0].id}>` && reason) {
          await lib.discord.guilds['@0.1.0'].members.roles.update({
            role_id: mutedRole.id,
            user_id: event.mentions[0].id,
            guild_id,
          });
          await lib.discord.channels['@0.0.6'].messages.create({
            channel_id,
            content: ` `,
            embed: {
              title: ` `,
              type: 'rich',
              color: 0xf3f3f3,
              description: `${text[1]} is muted: ${reason} `,
            },
          });
        }
      }
    }

    //unmute
    if (
      event.content.startsWith(`${process.env.PREFIX}unmute`) ||
      event.content.startsWith(`${newPrefix}unmute`)
    ) {
      let canUnmute = false;
      guild_id;
      let roles = await lib.discord.guilds['@0.1.0'].roles.list({
        guild_id,
      });

      let mutedRole = roles.find((role) => {
        return role.name.toLowerCase().startsWith('mute');
      });

      let authorRoles = roles.filter((role) => {
        return event.member.roles.indexOf(role.id) > -1;
      });

      if (guild.owner_id === event.author.id) {
        canUnmute = true;
      } else {
        for (let i = 0; i < authorRoles.length; i++) {
          let role = authorRoles[i];
          canUnmute =
            role.name.toLowerCase().match(/\bmod/i) ||
            role.name.toLowerCase().match(/\badmin/i) ||
            role.permission_names.includes('ADMINISTRATOR');
          if (canUnmute) {
            break;
          }
        }
      }
      if (canUnmute) {
        await lib.discord.guilds['@0.1.0'].members.roles.destroy({
          role_id: mutedRole.id,
          user_id: event.mentions[0].id,
          guild_id,
        });

        await lib.discord.channels['@0.1.1'].messages.create({
          channel_id,
          content: ``,
          embed: {
            title: ``,
            type: 'rich',
            color: 0xf3f3f3,
            description: `${event.mentions[0].username} is unmuted `,
          },
        });
      } else {
        await lib.discord.channels['@0.0.6'].messages.create({
          channel_id,
          content: `you dont have permission`,
        });
      }
    }
  }
};
